# in documentation we are told to put this in config.yml, but why? it's clearer here
sonata_admin:
    title:      CourseMaker - Administration
    templates:
        layout:  RotisCourseMakerBundle:Backend:layout.html.twig

    dashboard:
        blocks:
            # display a dashboard block
            - { position: left, type: sonata.admin.block.admin_list }
            -
                position: right
                type: sonata.block.service.text
                settings:
                    content: >
                        <h2>Bienvenue !</h2>
                        <p>Ceci est un essai en utilisant le SonataAdminBundle, qui manque encore de finition !</p>

        # with groups we can define how is organized the admin_list block
        groups:
            courses:
                label: 'Métier'
                items: ~
            params:
                label: 'Configuration'
                items: ~


    # set to true to persist filter settings per admin module in the user's session
    persist_filters: true

# services define objects editable in the backend
services:
    sonata.admin.course:
        class: Rotis\CourseMakerBundle\Admin\CourseAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: params, label: "Courses" }
        arguments:
            - ~
            - Rotis\CourseMakerBundle\Entity\Course
            - 'SonataAdminBundle:CRUD'
        calls:
            - [ setTranslationDomain, [RotisCourseMakerBundle]]
    sonata.admin.equipe:
        class: Rotis\CourseMakerBundle\Admin\EquipeAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: courses, label: "Équipe" }
        arguments:
            - ~
            - Rotis\CourseMakerBundle\Entity\Equipe
            - 'SonataAdminBundle:CRUD'
        calls:
            - [ setTranslationDomain, [RotisCourseMakerBundle]]
    sonata.admin.joueur:
        class: Rotis\CourseMakerBundle\Admin\JoueurAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: courses, label: "Joueur" }
        arguments:
            - ~
            - Rotis\CourseMakerBundle\Entity\Joueur
            - 'RotisCourseMakerBundle:JoueurBackend'
        calls:
            - [ setTranslationDomain, [RotisCourseMakerBundle]]
    sonata.admin.categorie:
        class: Rotis\CourseMakerBundle\Admin\CategorieAdmin
        tags:
            - { name: sonata.admin, manager_type: orm, group: params, label: "Catégories" }
        arguments:
            - ~
            - Rotis\CourseMakerBundle\Entity\Categorie
            - 'SonataAdminBundle:CRUD'
        calls:
            - [ setTranslationDomain, [RotisCourseMakerBundle]]
